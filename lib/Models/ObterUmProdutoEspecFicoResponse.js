/**
 * APIDeIntegraOMercosLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

'use strict';

const BaseModel = require('./BaseModel');

/**
 * Creates an instance of ObterUmProdutoEspecFicoResponse
 */
class ObterUmProdutoEspecFicoResponse extends BaseModel {
    /**
     * @constructor
     * @param   {Object}  obj    The object passed to constructor
     */
    constructor(obj) {
        super(obj);
        if (obj === undefined || obj === null) return;
        this.ipi = this.constructor.getValue(obj.ipi);
        this.precoTabela = this.constructor.getValue(obj.precoTabela || obj.preco_tabela);
        this.precoMinimo = this.constructor.getValue(obj.precoMinimo || obj.preco_minimo);
        this.nome = this.constructor.getValue(obj.nome);
        this.observacoes = this.constructor.getValue(obj.observacoes);
        this.saldoEstoque = this.constructor.getValue(obj.saldoEstoque || obj.saldo_estoque);
        this.st = this.constructor.getValue(obj.st);
        this.ultimaAlteracao =
          this.constructor.getValue(obj.ultimaAlteracao
     || obj.ultima_alteracao);
        this.categoriaId = this.constructor.getValue(obj.categoriaId || obj.categoria_id);
        this.tipoIpi = this.constructor.getValue(obj.tipoIpi || obj.tipo_ipi);
        this.comissao = this.constructor.getValue(obj.comissao);
        this.unidade = this.constructor.getValue(obj.unidade);
        this.id = this.constructor.getValue(obj.id);
        this.codigo = this.constructor.getValue(obj.codigo);
        this.ativo = this.constructor.getValue(obj.ativo);
        this.moeda = this.constructor.getValue(obj.moeda);
        this.codigoNcm = this.constructor.getValue(obj.codigoNcm || obj.codigo_ncm);
        this.multiplo = this.constructor.getValue(obj.multiplo);
        this.excluido = this.constructor.getValue(obj.excluido);
        this.pesoBruto = this.constructor.getValue(obj.pesoBruto || obj.peso_bruto);
    }

    /**
     * Function containing information about the fields of this model
     * @return   {array}   Array of objects containing information about the fields
     */
    static mappingInfo() {
        return super.mappingInfo().concat([
            { name: 'ipi', realName: 'ipi' },
            { name: 'precoTabela', realName: 'preco_tabela' },
            { name: 'precoMinimo', realName: 'preco_minimo' },
            { name: 'nome', realName: 'nome' },
            { name: 'observacoes', realName: 'observacoes' },
            { name: 'saldoEstoque', realName: 'saldo_estoque' },
            { name: 'st', realName: 'st' },
            { name: 'ultimaAlteracao', realName: 'ultima_alteracao' },
            { name: 'categoriaId', realName: 'categoria_id' },
            { name: 'tipoIpi', realName: 'tipo_ipi' },
            { name: 'comissao', realName: 'comissao' },
            { name: 'unidade', realName: 'unidade' },
            { name: 'id', realName: 'id' },
            { name: 'codigo', realName: 'codigo' },
            { name: 'ativo', realName: 'ativo' },
            { name: 'moeda', realName: 'moeda' },
            { name: 'codigoNcm', realName: 'codigo_ncm' },
            { name: 'multiplo', realName: 'multiplo' },
            { name: 'excluido', realName: 'excluido' },
            { name: 'pesoBruto', realName: 'peso_bruto' },
        ]);
    }

    /**
     * Function containing information about discriminator values
     * mapped with their corresponding model class names
     *
     * @return   {object}  Object containing Key-Value pairs mapping discriminator
     *                     values with their corresponding model classes
     */
    static discriminatorMap() {
        return {};
    }
}

module.exports = ObterUmProdutoEspecFicoResponse;
