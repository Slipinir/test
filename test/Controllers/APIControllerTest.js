/**
 * APIDeIntegraOMercosLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

'use strict';

const chai = require('chai');
const assert = chai.assert;
const TestHelper = require("../TestHelper");
const APIHelper = require("../../lib/APIHelper");
const testerlib = require("../../lib");
const testConfiguration = require("../TestBootstrap");
const baseController = require("../../lib/Controllers/BaseController");

const controller = testerlib.APIController;
const ObterTodosOsProdutosResponse = testerlib.ObterTodosOsProdutosResponse;
const ObterUmProdutoEspecFicoResponse = testerlib.ObterUmProdutoEspecFicoResponse;
const IncluirUmProdutoRequest = testerlib.IncluirUmProdutoRequest;
const AlterarUmProdutoResponse = testerlib.AlterarUmProdutoResponse;
const AjustarOEstoqueDeProdutoRequest = testerlib.AjustarOEstoqueDeProdutoRequest;
const AjustarOEstoqueDeProdutoRequest1 = testerlib.AjustarOEstoqueDeProdutoRequest1;
const AjustarOEstoqueDeProduto422ResponseException = testerlib.AjustarOEstoqueDeProduto422ResponseException;
const IncluirUmaImagemRequest = testerlib.IncluirUmaImagemRequest;
const IncluirUmaImagemRequest1 = testerlib.IncluirUmaImagemRequest1;
const IncluirUmaImagem412ResponseException = testerlib.IncluirUmaImagem412ResponseException;
const Erro = testerlib.Erro;
const ObterTodasAsTabelasDePreOResponse = testerlib.ObterTodasAsTabelasDePreOResponse;
const ObterUmaTabelaDePreOResponse = testerlib.ObterUmaTabelaDePreOResponse;
const IncluirUmaTabelaDePreORequest = testerlib.IncluirUmaTabelaDePreORequest;
const AlterarUmaTabelaDePreORequest = testerlib.AlterarUmaTabelaDePreORequest;
const IncluirUmVNculoDeProdutoComTabelaDePreO412ResponseException = testerlib.IncluirUmVNculoDeProdutoComTabelaDePreO412ResponseException;
const IncluirUmVNculoDeProdutoComTabelaDePreORequest = testerlib.IncluirUmVNculoDeProdutoComTabelaDePreORequest;
const AlterarUmVNculoDeProdutoComTabelaDePreO412ResponseException = testerlib.AlterarUmVNculoDeProdutoComTabelaDePreO412ResponseException;
const AlterarUmVNculoDeProdutoComTabelaDePreORequest = testerlib.AlterarUmVNculoDeProdutoComTabelaDePreORequest;
const IncluirUmCliente412ResponseException = testerlib.IncluirUmCliente412ResponseException;
const IncluirUmClienteRequest = testerlib.IncluirUmClienteRequest;
const Email = testerlib.Email;
const Telefone = testerlib.Telefone;
const Contato = testerlib.Contato;
const EnderecosAdicionai = testerlib.EnderecosAdicionai;
const AlterarUmCliente412ResponseException = testerlib.AlterarUmCliente412ResponseException;
const AlterarUmClienteRequest = testerlib.AlterarUmClienteRequest;
const EnderecosAdicionai2 = testerlib.EnderecosAdicionai2;
const IncluirUmaNovaRede412ResponseException = testerlib.IncluirUmaNovaRede412ResponseException;
const IncluirUmaNovaRedeRequest = testerlib.IncluirUmaNovaRedeRequest;
const AlterarUmaRedeExistente412ResponseException = testerlib.AlterarUmaRedeExistente412ResponseException;
const AlterarUmaRedeExistenteRequest = testerlib.AlterarUmaRedeExistenteRequest;
const IncluirUmSegmento412ResponseException = testerlib.IncluirUmSegmento412ResponseException;
const IncluirUmSegmentoRequest = testerlib.IncluirUmSegmentoRequest;
const AlterarUmSegmentoExistente412ResponseException = testerlib.AlterarUmSegmentoExistente412ResponseException;
const AlterarUmSegmentoExistenteRequest = testerlib.AlterarUmSegmentoExistenteRequest;
const IncluirUmaTag412ResponseException = testerlib.IncluirUmaTag412ResponseException;
const IncluirUmaTagRequest = testerlib.IncluirUmaTagRequest;
const AlterarUmaTagExistente412ResponseException = testerlib.AlterarUmaTagExistente412ResponseException;
const AlterarUmaTagExistenteRequest = testerlib.AlterarUmaTagExistenteRequest;
const VincularClienteTags412ResponseException = testerlib.VincularClienteTags412ResponseException;
const VincularClienteTagsRequest = testerlib.VincularClienteTagsRequest;
const IncluirUmaNovaCategoria412ResponseException = testerlib.IncluirUmaNovaCategoria412ResponseException;
const IncluirUmaNovaCategoriaRequest = testerlib.IncluirUmaNovaCategoriaRequest;
const AlterarUmaCategoriaExistente412ResponseException = testerlib.AlterarUmaCategoriaExistente412ResponseException;
const AlterarUmaCategoriaExistenteRequest = testerlib.AlterarUmaCategoriaExistenteRequest;
const VincularClienteCategoria412ResponseException = testerlib.VincularClienteCategoria412ResponseException;
const VincularClienteCategoriaRequest = testerlib.VincularClienteCategoriaRequest;
const LiberarTodasAsCategoriasParaOCliente412ResponseException = testerlib.LiberarTodasAsCategoriasParaOCliente412ResponseException;
const LiberarTodasAsCategoriasParaOClienteRequest = testerlib.LiberarTodasAsCategoriasParaOClienteRequest;
const VincularClienteTabelaDePreO412ResponseException = testerlib.VincularClienteTabelaDePreO412ResponseException;
const VincularClienteTabelaDePreORequest = testerlib.VincularClienteTabelaDePreORequest;
const LiberarTodasAsTabelasDePreOParaOCliente412ResponseException = testerlib.LiberarTodasAsTabelasDePreOParaOCliente412ResponseException;
const LiberarTodasAsTabelasDePreOParaOClienteRequest = testerlib.LiberarTodasAsTabelasDePreOParaOClienteRequest;
const IncluirUmaRegraDeLiberaO412ResponseException = testerlib.IncluirUmaRegraDeLiberaO412ResponseException;
const IncluirUmaRegraDeLiberaORequest = testerlib.IncluirUmaRegraDeLiberaORequest;
const IncluirUmaTransportadora412ResponseException = testerlib.IncluirUmaTransportadora412ResponseException;
const IncluirUmaTransportadoraRequest = testerlib.IncluirUmaTransportadoraRequest;
const AlterarUmaTransportadora412ResponseException = testerlib.AlterarUmaTransportadora412ResponseException;
const AlterarUmaTransportadoraRequest = testerlib.AlterarUmaTransportadoraRequest;
const IncluirUmaCondiODePagamento412ResponseException = testerlib.IncluirUmaCondiODePagamento412ResponseException;
const IncluirUmaCondiODePagamentoRequest = testerlib.IncluirUmaCondiODePagamentoRequest;
const AlterarUmaCondiODePagamento412ResponseException = testerlib.AlterarUmaCondiODePagamento412ResponseException;
const AlterarUmaCondiODePagamentoRequest = testerlib.AlterarUmaCondiODePagamentoRequest;
const VincularClienteCondiODePagamento412ResponseException = testerlib.VincularClienteCondiODePagamento412ResponseException;
const VincularClienteCondiODePagamentoRequest = testerlib.VincularClienteCondiODePagamentoRequest;
const LiberarTodasAsCondiEsDePagamentoParaOCliente412ResponseException = testerlib.LiberarTodasAsCondiEsDePagamentoParaOCliente412ResponseException;
const LiberarTodasAsCondiEsDePagamentoParaOClienteRequest = testerlib.LiberarTodasAsCondiEsDePagamentoParaOClienteRequest;
const IncluirUmaFormaDePagamento412ResponseException = testerlib.IncluirUmaFormaDePagamento412ResponseException;
const IncluirUmaFormaDePagamentoRequest = testerlib.IncluirUmaFormaDePagamentoRequest;
const AlterarUmaFormaDePagamento412ResponseException = testerlib.AlterarUmaFormaDePagamento412ResponseException;
const AlterarUmaFormaDePagamentoRequest = testerlib.AlterarUmaFormaDePagamentoRequest;
const IncluirUmPedidoResponse = testerlib.IncluirUmPedidoResponse;
const Iten = testerlib.Iten;
const IncluirUmPedido412ResponseException = testerlib.IncluirUmPedido412ResponseException;
const IncluirUmPedidoRequest = testerlib.IncluirUmPedidoRequest;
const Extra = testerlib.Extra;
const Iten1 = testerlib.Iten1;
const QuantidadeGrade = testerlib.QuantidadeGrade;
const AlterarUmPedido412ResponseException = testerlib.AlterarUmPedido412ResponseException;
const AlterarUmPedidoRequest = testerlib.AlterarUmPedidoRequest;
const Extra2 = testerlib.Extra2;
const IncluirUmPedido412Response1Exception = testerlib.IncluirUmPedido412Response1Exception;
const IncluirUmPedidoRequest2 = testerlib.IncluirUmPedidoRequest2;
const Iten6 = testerlib.Iten6;
const DescontosDePromoco = testerlib.DescontosDePromoco;
const DescontosDePolitica = testerlib.DescontosDePolitica;
const AlterarUmPedidoResponse = testerlib.AlterarUmPedidoResponse;
const AlterarUmPedido412Response1Exception = testerlib.AlterarUmPedido412Response1Exception;
const AlterarUmPedidoRequest2 = testerlib.AlterarUmPedidoRequest2;
const Iten9 = testerlib.Iten9;
const CancelarUmPedido412ResponseException = testerlib.CancelarUmPedido412ResponseException;
const CadastrarStatus412ResponseException = testerlib.CadastrarStatus412ResponseException;
const CadastrarStatusRequest = testerlib.CadastrarStatusRequest;
const AlterarUmStatus412ResponseException = testerlib.AlterarUmStatus412ResponseException;
const AlterarUmStatusRequest = testerlib.AlterarUmStatusRequest;
const AlterarStatusDeUmPedido412ResponseException = testerlib.AlterarStatusDeUmPedido412ResponseException;
const AlterarStatusDeUmPedidoRequest = testerlib.AlterarStatusDeUmPedidoRequest;
const CadastrarTipoDePedido412ResponseException = testerlib.CadastrarTipoDePedido412ResponseException;
const CadastrarTipoDePedidoRequest = testerlib.CadastrarTipoDePedidoRequest;
const AlterarUmTipoDePedido412ResponseException = testerlib.AlterarUmTipoDePedido412ResponseException;
const AlterarUmTipoDePedidoRequest = testerlib.AlterarUmTipoDePedidoRequest;
const IncluirUmCampoExtraResponse = testerlib.IncluirUmCampoExtraResponse;
const IncluirUmCampoExtra412ResponseException = testerlib.IncluirUmCampoExtra412ResponseException;
const IncluirUmCampoExtraRequest = testerlib.IncluirUmCampoExtraRequest;
const IncluirUmCampoExtraDoTipoListaResponse = testerlib.IncluirUmCampoExtraDoTipoListaResponse;
const IncluirUmCampoExtraDoTipoLista412ResponseException = testerlib.IncluirUmCampoExtraDoTipoLista412ResponseException;
const AlterarUmCampoExtraResponse = testerlib.AlterarUmCampoExtraResponse;
const AlterarUmCampoExtra412ResponseException = testerlib.AlterarUmCampoExtra412ResponseException;
const AlterarUmCampoExtraRequest = testerlib.AlterarUmCampoExtraRequest;
const AlterarUmCampoExtraDoTipoListaResponse = testerlib.AlterarUmCampoExtraDoTipoListaResponse;
const AlterarUmCampoExtraDoTipoLista412ResponseException = testerlib.AlterarUmCampoExtraDoTipoLista412ResponseException;
const FaturarUmPedido412ResponseException = testerlib.FaturarUmPedido412ResponseException;
const FaturarUmPedidoRequest = testerlib.FaturarUmPedidoRequest;
const AlterarFaturamentoDoPedido412ResponseException = testerlib.AlterarFaturamentoDoPedido412ResponseException;
const AlterarFaturamentoDoPedidoRequest = testerlib.AlterarFaturamentoDoPedidoRequest;
const IncluirUmTTulo412ResponseException = testerlib.IncluirUmTTulo412ResponseException;
const IncluirUmTTuloRequest = testerlib.IncluirUmTTuloRequest;
const AlterarUmTTulo412ResponseException = testerlib.AlterarUmTTulo412ResponseException;
const AlterarUmTTuloRequest = testerlib.AlterarUmTTuloRequest;
const IncluirUmaConfiguraODeICMSSTRequest = testerlib.IncluirUmaConfiguraODeICMSSTRequest;


describe("APIController Tests", function tests() {
    this.timeout(testConfiguration.TEST_TIMEOUT);

    /**
     * Testcase for testing endpoint Obter Status
     */
    it("should testObterStatus1 response", function testObterStatus1Test(done) {
        // parameters for the API call
        let contentType = 'application/json';
        let applicationToken = '1413cea4-d18a-11e4-be31-f23c91df94d9';
        let companyToken = 'a77da094-9443-11e5-be32-f23c91df94d9';

        controller.getObterStatus(contentType, applicationToken, companyToken, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            // test headers
            let headers = [];
            headers['Content-Type'] = null;
            assert.isTrue(TestHelper.areHeadersProperSubsetOf(headers, context.response.headers, true));
            done();
        }).catch(() => undefined);
    });

    /**
     * Cada registro dessa entidade contém uma regra que define se um usuário possui ou não acesso a um cliente armazenado no Mercos. O conjunto dessas regras será utilizado para obter a carteira de clientes de cada usuário dentro do Mercos.

Não é possível editar um registro desta entidade, porém o sistema Mercos sempre irá respeitar o registro mais recente tratando da liberação de um determinado cliente para um determinado usuário.

Por padrão os clientes cadastrados via integração estão bloqueados para todos os usuários com a opção “Limitar acesso aos clientes” selecionada, sendo necessário fazer um POST nesta entidade criando liberações destes clientes para os respectivos usuários.

Novos usuários cadastrados na interface da Mercos com a opção “Limitar acesso aos clientes” não tem liberação de acesso para nenhum cliente, sendo necessário fazer um POST nesta entidade criando liberações deste usuário para os respectivos clientes.

Caso seja feito um POST criando uma regra de liberação para um usuário com a opção “Acessar todos os Clientes” selecionada, este usuário será automaticamente alterado para a opção “Limitar acesso aos clientes” e a nova regra de liberação será cadastrada.

Por padrão clientes cadastrados pela interface do sistema Mercos estão liberados para o usuário que cadastrou estes clientes, mesmo que o usuário esteja com a opção “Limitar acesso aos clientes” selecionada. Caso seja feito um POST bloqueando um cliente para o usuário que o cadastrou, o sistema irá respeitar este bloqueio.

Não é possível fazer um bloqueio de cliente para um usuário administrador.

Ao atualizar as liberações de clientes para os usuários, não é recomendado enviar POSTs de bloqueio de todos os clientes para todos os usuários e depois enviar as novas liberações, este procedimento seria muito lento e poderia causar problemas na base do cliente e o bloqueio da integração pela Mercos. A forma correta é efetuar primeiro um GET de todos os registros desta entidade e comparar este retorno com as novas permissões definidas no ERP realizando POSTs apenas para os casos de divergência nas liberações.

#### Estrutura de Retorno do GET

| Campo            | Tipo     | Descrição                                                   |
|------------------|----------|-------------------------------------------------------------|
| cliente_id       | Integer  | Identificador único do Cliente da Mercos.                   |
| usuario_id       | Integer  | Identificador único do Usuário da Mercos.                   |
| liberado         | Boolean  | Representa se o Usuário tem acesso ao Cliente.              |
| ultima_alteracao | DateTime | Data e hora da última modificação desta categoria no Mercos |
     */
    it("should testObterTodasAsRegrasDeLiberaO1 response", function testObterTodasAsRegrasDeLiberaO1Test(done) {
        // parameters for the API call
        let contentType = 'application/json';
        let applicationToken = '1413cea4-d18a-11e4-be31-f23c91df94d9';
        let companyToken = 'a77da094-9443-11e5-be32-f23c91df94d9';

        controller.getObterTodasAsRegrasDeLiberaO(contentType, applicationToken, companyToken, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            // test headers
            let headers = [];
            headers['Content-Type'] = null;
            assert.isTrue(TestHelper.areHeadersProperSubsetOf(headers, context.response.headers, true));
            done();
        }).catch(() => undefined);
    });

    /**
     * Os campos extras são utilizados para anotar no pedido informações relevantes para a empresa ou para o integrador, por exemplo, "data da entrega" e "tipo de frete". Os campos extras podem ser dos seguintes tipos: texto livre, data, hora ou número.

#### Estrutura de Retorno do GET

| Campo | Tipo       | Descrição                           |
|-------|------------|-------------------------------------|
| id    | Integer    | Identificador único do campo extra. |
| tipo  | String     | (“0”) Texto livre, (“1”) data, ("2") numérico, ("3") hora, ("4") Lista |
| nome  | String: 50 | Nome do campo extra.                |
| obrigatorio    | Boolean    | Indica obrigatoriedade do campo extra.  |
| casas_decimais | Integer | Quantidade de casas decimais, valores suportados de 0 a 5. Esta informação será ignorada se o tipo do campo não for numérico. |
| formato| String | ("0") sem formatação, ("1") monetário 'R$', ("2") porcentagem '%'. Esta informação será ignorada se o tipo do campo não for numérico. |
| exibir_para_cliente | Boolean | Indica se o valor preenchido para o campo será exibido para o cliente na visualização do pedido. |
| ultima_alteracao | DateTime    | Data e hora da última modificação deste registro no Mercos |
| excluido         | Boolean    | Indica se o campo está excluído.
| lista_multipla | Boolean | Indica se é uma lista simples ou múltipla. |
| itens | List: 100 | Lista de itens |

#### Estrutura de retorno dos itens

| Campo | Tipo       | Descrição                           |
|-------|------------|-------------------------------------|
| id    | Integer    | Identificador único dos itens de campo extra. |
| campo_custom_id | Integer | Identificador único do campo extra. |
| ordem | Integer | Ordem do item na lista. |
| valor | String: 100 | Valor do item. | 
| selecionado | Boolean | Indica se esse item já vem pré-selecionado. |
| ultima_alteracao | DateTime    | Data e hora da última modificação deste registro no Mercos |
| excluido | Boolean    | Indica se o campo está excluído.
     */
    it("should testObterTodosOsCamposExtras1 response", function testObterTodosOsCamposExtras1Test(done) {
        // parameters for the API call
        let contentType = 'application/json';
        let applicationToken = '1413cea4-d18a-11e4-be31-f23c91df94d9';
        let companyToken = 'a77da094-9443-11e5-be32-f23c91df94d9';

        controller.getObterTodosOsCamposExtras(contentType, applicationToken, companyToken, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            // test headers
            let headers = [];
            headers['Content-Type'] = null;
            assert.isTrue(TestHelper.areHeadersProperSubsetOf(headers, context.response.headers, true));
            done();
        }).catch(() => undefined);
    });

});
